#include "./fade.hpp"

#include <cmath>
#include <cstdint>
#include <vector>

#include "./color.hpp"

namespace lamp {
std::vector<uint32_t> quadEaseInOut = {0, 1, 7, 17, 31, 50, 71, 98, 127, 162, 200, 241, 287, 338, 392, 449, 511, 577, 648, 721, 800, 881, 967, 1057, 1151, 1249, 1352, 1457, 1568, 1681, 1799, 1921, 2047, 2178, 2311, 2450, 2592, 2737, 2887, 3042, 3200, 3361, 3527, 3697, 3871, 4049, 4231, 4418, 4607, 4802, 4999, 5201, 5408, 5617, 5831, 6049, 6272, 6497, 6727, 6962, 7199, 7441, 7687, 7937, 8191, 8449, 8712, 8977, 9247, 9521, 9800, 10081, 10368, 10657, 10951, 11249, 11551, 11857, 12168, 12482, 12800, 13121, 13447, 13777, 14111, 14449, 14791, 15138, 15487, 15841, 16199, 16562, 16927, 17298, 17672, 18049, 18431, 18818, 19208, 19601, 19999, 20401, 20807, 21217, 21632, 22049, 22471, 22897, 23327, 23762, 24199, 24641, 25088, 25537, 25991, 26449, 26911, 27377, 27848, 28321, 28799, 29281, 29767, 30257, 30751, 31249, 31751, 32257, 32767, 33281, 33799, 34322, 34848, 35378, 35911, 36449, 36991, 37537, 38087, 38642, 39200, 39761, 40327, 40897, 41472, 42049, 42631, 43218, 43807, 44401, 44999, 45602, 46207, 46817, 47431, 48049, 48672, 49297, 49928, 50561, 51200, 51841, 52487, 53137, 53791, 54449, 55111, 55777, 56447, 57121, 57799, 58481, 59167, 59857, 60552, 61249, 61951, 62657, 63367, 64081, 64799, 65522, 66248, 66977, 67711, 68449, 69192, 69937, 70688, 71442, 72199, 72961, 73727, 74497, 75272, 76050, 76832, 77617, 78407, 79202, 79999, 80801, 81607, 82417, 83231, 84050, 84871, 85697, 86528, 87361, 88199, 89041, 89887, 90737, 91591, 92449, 93311, 94177, 95048, 95921, 96799, 97682, 98567, 99457, 100352, 101249, 102151, 103057, 103967, 104881, 105799, 106721, 107647, 108577, 109511, 110449, 111392, 112337, 113287, 114241, 115199, 116161, 117127, 118097, 119071, 120049, 121031, 122017, 123007, 124001, 124999, 126001, 127007, 128017, 129031, 130050, 131071, 132089, 133103, 134113, 135119, 136121, 137118, 138113, 139102, 140089, 141070, 142049, 143022, 143993, 144959, 145921, 146879, 147833, 148783, 149729, 150671, 151608, 152542, 153473, 154398, 155321, 156239, 157153, 158062, 158969, 159871, 160769, 161662, 162553, 163438, 164321, 165199, 166073, 166942, 167809, 168670, 169529, 170383, 171233, 172079, 172921, 173758, 174593, 175423, 176249, 177070, 177889, 178703, 179512, 180318, 181121, 181918, 182713, 183503, 184288, 185070, 185849, 186622, 187393, 188158, 188921, 189679, 190432, 191182, 191929, 192670, 193409, 194142, 194873, 195599, 196321, 197039, 197753, 198463, 199169, 199871, 200568, 201263, 201953, 202639, 203321, 203999, 204672, 205343, 206009, 206671, 207329, 207982, 208633, 209279, 209921, 210558, 211193, 211822, 212449, 213070, 213689, 214303, 214912, 215519, 216121, 216718, 217312, 217902, 218489, 219071, 219649, 220222, 220793, 221359, 221921, 222479, 223032, 223583, 224128, 224670, 225209, 225742, 226273, 226799, 227321, 227839, 228353, 228863, 229369, 229871, 230369, 230862, 231353, 231838, 232320, 232799, 233272, 233743, 234209, 234671, 235129, 235582, 236033, 236479, 236921, 237359, 237793, 238222, 238649, 239071, 239489, 239903, 240313, 240718, 241121, 241519, 241913, 242302, 242689, 243070, 243448, 243823, 244193, 244559, 244920, 245279, 245633, 245983, 246329, 246671, 247009, 247342, 247673, 247999, 248321, 248639, 248953, 249263, 249569, 249870, 250169, 250462, 250753, 251039, 251321, 251598, 251873, 252143, 252409, 252671, 252929, 253183, 253433, 253679, 253921, 254159, 254393, 254622, 254849, 255071, 255289, 255502, 255712, 255918, 256120, 256319, 256513, 256702, 256889, 257071, 257249, 257423, 257593, 257759, 257921, 258078, 258233, 258382, 258529, 258670, 258808, 258943, 259073, 259199, 259321, 259439, 259553, 259662, 259769, 259871, 259969, 260062, 260153, 260239, 260321, 260399, 260473, 260543, 260609, 260670, 260729, 260782, 260832, 260879, 260920, 260959, 260993, 261022, 261049, 261070, 261089, 261102, 261113, 261118};

std::vector<uint16_t> linear = {0, 100, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 1100, 1200, 1300, 1400, 1500, 1600, 1700, 1800, 1900, 2000, 2100, 2200, 2300, 2400, 2500, 2600, 2700, 2800, 2899, 3000, 3100, 3200, 3300, 3400, 3500, 3600, 3700, 3800, 3900, 4000, 4100, 4200, 4300, 4400, 4500, 4600, 4700, 4800, 4900, 5000, 5100, 5200, 5300, 5400, 5500, 5600, 5699, 5799, 5900, 6000, 6100, 6200, 6300, 6400, 6500, 6600, 6700, 6800, 6900, 7000, 7100, 7200, 7300, 7400, 7500, 7600, 7700, 7800, 7900, 8000, 8100, 8200, 8300, 8400, 8500, 8600, 8700, 8800, 8900, 9000, 9100, 9200, 9300, 9400, 9500, 9600, 9700, 9800, 9900, 10000};

uint8_t ease(uint8_t start, uint8_t end, uint32_t duration, uint32_t currentStep) {
  uint32_t factor = quadEaseInOut[(uint16_t)((currentStep * 511 / duration * 511) / 511)];
  return ((end - start) * factor) / 262144 + start;
};

uint8_t easeLinear(uint8_t start, uint8_t end, uint32_t duration, uint32_t currentStep) {
  uint16_t factor = linear[(int)((currentStep * 100 / duration * 100) / 100)];

  return (((end - start) * factor) / 10000) + start;
};

Color fade(Color start, Color end, uint32_t steps, uint32_t currentStep) {
  return Color(
      (start.r == end.r) ? end.r : ease(start.r, end.r, steps, currentStep),
      (start.g == end.g) ? end.g : ease(start.g, end.g, steps, currentStep),
      (start.b == end.b) ? end.b : ease(start.b, end.b, steps, currentStep),
      (start.w == end.w) ? end.w : ease(start.w, end.w, steps, currentStep));
};

Color fadeLinear(Color start, Color end, uint32_t steps, uint32_t currentStep) {
  return Color(
      (start.r == end.r) ? end.r : easeLinear(start.r, end.r, steps, currentStep),
      (start.g == end.g) ? end.g : easeLinear(start.g, end.g, steps, currentStep),
      (start.b == end.b) ? end.b : easeLinear(start.b, end.b, steps, currentStep),
      (start.w == end.w) ? end.w : easeLinear(start.w, end.w, steps, currentStep));
};
}  // namespace lamp
