#include "./fade.hpp"

#include <cmath>
#include <cstdint>
#include <vector>

#include "./color.hpp"

namespace lamp {
std::vector<uint32_t> quadEaseInOut = {0, 1, 7, 17, 31, 50, 71, 98, 127, 162, 200, 241, 287, 338, 392, 449, 511, 577, 648, 721, 800, 881, 967, 1057, 1151, 1249, 1352, 1457, 1568, 1681, 1799, 1921, 2047, 2178, 2311, 2450, 2592, 2737, 2887, 3042, 3200, 3361, 3527, 3697, 3871, 4049, 4231, 4418, 4607, 4802, 4999, 5201, 5408, 5617, 5831, 6049, 6272, 6497, 6727, 6962, 7199, 7441, 7687, 7937, 8191, 8449, 8712, 8977, 9247, 9521, 9800, 10081, 10368, 10657, 10951, 11249, 11551, 11857, 12168, 12482, 12800, 13121, 13447, 13777, 14111, 14449, 14791, 15138, 15487, 15841, 16199, 16562, 16927, 17298, 17672, 18049, 18431, 18818, 19208, 19601, 19999, 20401, 20807, 21217, 21632, 22049, 22471, 22897, 23327, 23762, 24199, 24641, 25088, 25537, 25991, 26449, 26911, 27377, 27848, 28321, 28799, 29281, 29767, 30257, 30751, 31249, 31751, 32257, 32767, 33281, 33799, 34322, 34848, 35378, 35911, 36449, 36991, 37537, 38087, 38642, 39200, 39761, 40327, 40897, 41472, 42049, 42631, 43218, 43807, 44401, 44999, 45602, 46207, 46817, 47431, 48049, 48672, 49297, 49928, 50561, 51200, 51841, 52487, 53137, 53791, 54449, 55111, 55777, 56447, 57121, 57799, 58481, 59167, 59857, 60552, 61249, 61951, 62657, 63367, 64081, 64799, 65522, 66248, 66977, 67711, 68449, 69192, 69937, 70688, 71442, 72199, 72961, 73727, 74497, 75272, 76050, 76832, 77617, 78407, 79202, 79999, 80801, 81607, 82417, 83231, 84050, 84871, 85697, 86528, 87361, 88199, 89041, 89887, 90737, 91591, 92449, 93311, 94177, 95048, 95921, 96799, 97682, 98567, 99457, 100352, 101249, 102151, 103057, 103967, 104881, 105799, 106721, 107647, 108577, 109511, 110449, 111392, 112337, 113287, 114241, 115199, 116161, 117127, 118097, 119071, 120049, 121031, 122017, 123007, 124001, 124999, 126001, 127007, 128017, 129031, 130050, 131071, 132089, 133103, 134113, 135119, 136121, 137118, 138113, 139102, 140089, 141070, 142049, 143022, 143993, 144959, 145921, 146879, 147833, 148783, 149729, 150671, 151608, 152542, 153473, 154398, 155321, 156239, 157153, 158062, 158969, 159871, 160769, 161662, 162553, 163438, 164321, 165199, 166073, 166942, 167809, 168670, 169529, 170383, 171233, 172079, 172921, 173758, 174593, 175423, 176249, 177070, 177889, 178703, 179512, 180318, 181121, 181918, 182713, 183503, 184288, 185070, 185849, 186622, 187393, 188158, 188921, 189679, 190432, 191182, 191929, 192670, 193409, 194142, 194873, 195599, 196321, 197039, 197753, 198463, 199169, 199871, 200568, 201263, 201953, 202639, 203321, 203999, 204672, 205343, 206009, 206671, 207329, 207982, 208633, 209279, 209921, 210558, 211193, 211822, 212449, 213070, 213689, 214303, 214912, 215519, 216121, 216718, 217312, 217902, 218489, 219071, 219649, 220222, 220793, 221359, 221921, 222479, 223032, 223583, 224128, 224670, 225209, 225742, 226273, 226799, 227321, 227839, 228353, 228863, 229369, 229871, 230369, 230862, 231353, 231838, 232320, 232799, 233272, 233743, 234209, 234671, 235129, 235582, 236033, 236479, 236921, 237359, 237793, 238222, 238649, 239071, 239489, 239903, 240313, 240718, 241121, 241519, 241913, 242302, 242689, 243070, 243448, 243823, 244193, 244559, 244920, 245279, 245633, 245983, 246329, 246671, 247009, 247342, 247673, 247999, 248321, 248639, 248953, 249263, 249569, 249870, 250169, 250462, 250753, 251039, 251321, 251598, 251873, 252143, 252409, 252671, 252929, 253183, 253433, 253679, 253921, 254159, 254393, 254622, 254849, 255071, 255289, 255502, 255712, 255918, 256120, 256319, 256513, 256702, 256889, 257071, 257249, 257423, 257593, 257759, 257921, 258078, 258233, 258382, 258529, 258670, 258808, 258943, 259073, 259199, 259321, 259439, 259553, 259662, 259769, 259871, 259969, 260062, 260153, 260239, 260321, 260399, 260473, 260543, 260609, 260670, 260729, 260782, 260832, 260879, 260920, 260959, 260993, 261022, 261049, 261070, 261089, 261102, 261113, 261118};
std::vector<uint32_t> linear = {0, 511, 1022, 1533, 2044, 2555, 3066, 3577, 4088, 4599, 5110, 5621, 6132, 6643, 7154, 7665, 8176, 8687, 9198, 9709, 10220, 10731, 11242, 11753, 12264, 12775, 13286, 13797, 14308, 14819, 15330, 15841, 16352, 16863, 17374, 17885, 18396, 18907, 19418, 19929, 20440, 20951, 21462, 21973, 22484, 22995, 23506, 24017, 24528, 25039, 25550, 26061, 26572, 27083, 27594, 28105, 28616, 29127, 29638, 30149, 30660, 31171, 31682, 32193, 32704, 33215, 33726, 34237, 34748, 35259, 35770, 36281, 36792, 37303, 37814, 38325, 38836, 39347, 39858, 40369, 40880, 41391, 41902, 42413, 42924, 43435, 43946, 44457, 44968, 45479, 45990, 46501, 47012, 47523, 48034, 48545, 49056, 49567, 50078, 50589, 51100, 51611, 52122, 52633, 53144, 53655, 54166, 54677, 55188, 55699, 56210, 56721, 57232, 57743, 58254, 58765, 59276, 59787, 60298, 60809, 61320, 61831, 62342, 62853, 63364, 63875, 64386, 64897, 65408, 65919, 66430, 66941, 67452, 67963, 68474, 68985, 69496, 70007, 70518, 71029, 71540, 72051, 72562, 73073, 73584, 74095, 74606, 75117, 75628, 76139, 76650, 77161, 77672, 78183, 78694, 79205, 79716, 80227, 80738, 81249, 81760, 82271, 82782, 83293, 83804, 84315, 84826, 85337, 85848, 86359, 86870, 87381, 87892, 88403, 88914, 89425, 89936, 90447, 90958, 91469, 91980, 92491, 93002, 93513, 94024, 94535, 95046, 95557, 96068, 96579, 97090, 97601, 98112, 98623, 99134, 99645, 100156, 100667, 101178, 101689, 102200, 102711, 103222, 103733, 104244, 104755, 105266, 105777, 106288, 106799, 107310, 107821, 108332, 108843, 109354, 109865, 110376, 110887, 111398, 111909, 112420, 112931, 113442, 113953, 114464, 114975, 115486, 115997, 116508, 117019, 117530, 118041, 118552, 119063, 119574, 120085, 120596, 121107, 121618, 122129, 122640, 123151, 123662, 124173, 124684, 125195, 125706, 126217, 126728, 127239, 127750, 128261, 128772, 129283, 129794, 130305, 130816, 131327, 131838, 132349, 132860, 133371, 133882, 134393, 134904, 135415, 135926, 136437, 136948, 137459, 137970, 138481, 138992, 139503, 140014, 140525, 141036, 141547, 142058, 142569, 143080, 143591, 144102, 144613, 145124, 145635, 146146, 146657, 147168, 147679, 148190, 148701, 149212, 149723, 150234, 150745, 151256, 151767, 152278, 152789, 153300, 153811, 154322, 154833, 155344, 155855, 156366, 156877, 157388, 157899, 158410, 158921, 159432, 159943, 160454, 160965, 161476, 161987, 162498, 163009, 163520, 164031, 164542, 165053, 165564, 166075, 166586, 167097, 167608, 168119, 168630, 169141, 169652, 170163, 170674, 171185, 171696, 172207, 172718, 173229, 173740, 174251, 174762, 175273, 175784, 176295, 176806, 177317, 177828, 178339, 178850, 179361, 179872, 180383, 180894, 181405, 181916, 182427, 182938, 183449, 183960, 184471, 184982, 185493, 186004, 186515, 187026, 187537, 188048, 188559, 189070, 189581, 190092, 190603, 191114, 191625, 192136, 192647, 193158, 193669, 194180, 194691, 195202, 195713, 196224, 196735, 197246, 197757, 198268, 198779, 199290, 199801, 200312, 200823, 201334, 201845, 202356, 202867, 203378, 203889, 204400, 204911, 205422, 205933, 206444, 206955, 207466, 207977, 208488, 208999, 209510, 210021, 210532, 211043, 211554, 212065, 212576, 213087, 213598, 214109, 214620, 215131, 215642, 216153, 216664, 217175, 217686, 218197, 218708, 219219, 219730, 220241, 220752, 221263, 221774, 222285, 222796, 223307, 223818, 224329, 224840, 225351, 225862, 226373, 226884, 227395, 227906, 228417, 228928, 229439, 229950, 230461, 230972, 231483, 231994, 232505, 233016, 233527, 234038, 234549, 235060, 235571, 236082, 236593, 237104, 237615, 238126, 238637, 239148, 239659, 240170, 240681, 241192, 241703, 242214, 242725, 243236, 243747, 244258, 244769, 245280, 245791, 246302, 246813, 247324, 247835, 248346, 248857, 249368, 249879, 250390, 250901, 251412, 251923, 252434, 252945, 253456, 253967, 254478, 254989, 255500, 256011, 256522, 257033, 257544, 258055, 258566, 259077, 259588, 260099, 260610};

uint8_t ease(uint8_t start, uint8_t end, uint32_t duration, uint32_t currentStep) {
  uint32_t factor = quadEaseInOut[(uint16_t)((currentStep * 511 / duration * 511) / 511)];

  return (((end - start) * factor) / 262144) + start;
};

uint8_t easeLinear(uint8_t start, uint8_t end, uint32_t duration, uint32_t currentStep) {
  uint32_t factor = linear[(uint16_t)((currentStep * 100 / duration * 100) / 100)];

  return (((end - start) * factor) / 262144) + start;
};

Color fade(Color start, Color end, uint32_t steps, uint32_t currentStep) {
  return Color(
      (start.r == end.r) ? end.r : ease(start.r, end.r, steps, currentStep),
      (start.g == end.g) ? end.g : ease(start.g, end.g, steps, currentStep),
      (start.b == end.b) ? end.b : ease(start.b, end.b, steps, currentStep),
      (start.w == end.w) ? end.w : ease(start.w, end.w, steps, currentStep));
};

Color fadeLinear(Color start, Color end, uint32_t steps, uint32_t currentStep) {
  return Color(
      (start.r == end.r) ? end.r : easeLinear(start.r, end.r, steps, currentStep),
      (start.g == end.g) ? end.g : easeLinear(start.g, end.g, steps, currentStep),
      (start.b == end.b) ? end.b : easeLinear(start.b, end.b, steps, currentStep),
      (start.w == end.w) ? end.w : easeLinear(start.w, end.w, steps, currentStep));
};
}  // namespace lamp
